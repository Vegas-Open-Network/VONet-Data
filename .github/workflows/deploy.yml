name: Deploy to IIS

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: [self-hosted]   # Windows self-hosted runner with IIS

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Stop App Pool
        run: Stop-WebAppPool -Name "data.vonet.org"
        shell: powershell

      - name: Publish to IIS
        run: dotnet publish --configuration Release --no-build --output C:\inetpub\sites\data.vonet.org

      - name: Start App Pool
        run: Start-WebAppPool -Name "data.vonet.org"
        shell: powershell

      # Set env vars 
      - name: Set machine env vars for IIS
        shell: powershell
        run: |
          $conn = "${{ secrets.CONNECTIONSTRINGS__DEFAULTCONNECTION }}"
          if (-not $conn) { throw "Missing secret CONNECTIONSTRINGS__DEFAULTCONNECTION" }

          # write machine-scope env vars IIS reads
          [System.Environment]::SetEnvironmentVariable("ConnectionStrings__DefaultConnection", $conn, "Machine")
          [System.Environment]::SetEnvironmentVariable("ASPNETCORE_ENVIRONMENT", "Production", "Machine")

          # quick sanity check without leaking value
          $len = ([System.Environment]::GetEnvironmentVariable("ConnectionStrings__DefaultConnection","Machine") | Measure-Object -Character).Characters
          Write-Host "Connection string length: $len"

          Import-Module WebAdministration
          Restart-WebAppPool -Name "data.vonet.org"

      # Recycle app pool so it picks up the new env vars
      - name: Restart App Pool
        shell: powershell
        run: Start-WebAppPool -Name "data.vonet.org"
