@page
@model VONetData.Pages.MapModel
@{
    ViewData["Title"] = "Network Map";
}
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

<style>
    .map-container {
        max-width: 1200px;
        margin: 2rem auto;
        background: #fff;
        border-radius: 18px;
        box-shadow: 0 2px 16px rgba(0,0,0,0.10);
        padding: 2rem;
    }
    #map {
        width: 100%;
        height: 70vh;
        border-radius: 12px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.08);
    }
    .map-header {
        text-align: center;
        font-size: 2rem;
        font-weight: bold;
        color: #1e3a8a;
        margin-bottom: 1rem;
    }
    .map-legend {
        margin-top: 1rem;
        background: #f9fafb;
        border-radius: 8px;
        padding: 0.75rem 1.5rem;
        font-size: 1rem;
        color: #444;
        box-shadow: 0 1px 4px rgba(0,0,0,0.05);
        display: inline-flex;
        gap: 1.4em;
        align-items: center;
    }
    .legend-item { display:inline-flex; align-items:center; gap:6px; }
    .legend-dot-s { width:12px; height:12px; border-radius:50%; background:#1e3a8a; box-shadow:0 0 0 1px #1e3a8a; }
    .legend-dot-n { width:12px; height:12px; border-radius:50%; background:#2563eb; box-shadow:0 0 0 1px #2563eb; }
    .request-circle { width:12px; height:12px; background:#d1d5db; border-radius:50%; border:1px solid #9ca3af; }
</style>
<div class="map-container">
    <div class="map-header">Vegas Open Network Map</div>
    <div id="map"></div>
    <div class="map-legend">
        <span class="legend-item"><span class="legend-dot-s"></span>Supernode</span>
        <span class="legend-item"><span class="legend-dot-n"></span>Node</span>
        <span class="legend-item"><span class="request-circle"></span>Request</span>
    </div>
</div>
<script>
    var map = L.map('map').setView([36.1699, -115.1398], 12); // Las Vegas
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 19,
        attribution: '© OpenStreetMap'
    }).addTo(map);

    // Supernodes (blue)
    var supernodes = [
        { name: "Supernode 1", lat: 36.174, lng: -115.137, info: "Main backbone node downtown." },
        { name: "Supernode 2", lat: 36.162, lng: -115.148, info: "West side supernode." },
        { name: "Supernode 3", lat: 36.185, lng: -115.120, info: "North supernode." }
    ];
    supernodes.forEach(function(s) {
        var m = L.circleMarker([s.lat, s.lng], { radius: 7, color:'#1e3a8a', weight:1, fillColor:'#1e3a8a', fillOpacity:0.9 }).addTo(map);
        m.bindPopup('<b>' + s.name + '</b><br>' + s.info + '<br><span style="color:#1e3a8a;font-weight:bold;">Supernode</span>');
    });

    // Connection requests (light gray)
    var geo = @Html.Raw(Model.MemberGeoJson);
    geo.features.forEach(function(f){
        var c = f.geometry.coordinates; // [lng, lat]
        var p = f.properties;
        var circle = L.circleMarker([c[1], c[0]], {
            radius: 5,
            color: '#9ca3af',
            weight: 1,
            fillColor: '#d1d5db',
            fillOpacity: 0.95
        }).addTo(map);
        circle.bindPopup(p.address + '<br>Roof Access: ' + (p.roof ? 'Yes' : 'No'));
    });

    // Existing nodes (light blue)
    var nodes = [
        { name: "Node A", lat: 36.168, lng: -115.135, info: "Residential node." },
        { name: "Node B", lat: 36.165, lng: -115.145, info: "Business node." }
    ];
    nodes.forEach(function(n) {
        var m = L.circleMarker([n.lat, n.lng], { radius: 6, color:'#2563eb', weight:1, fillColor:'#2563eb', fillOpacity:0.9 }).addTo(map);
        m.bindPopup('<b>' + n.name + '</b><br>' + n.info + '<br><span style="color:#2563eb;font-weight:bold;">Node</span>');
    });

    L.control.scale().addTo(map);
</script>
